
"Mythomorph Battle Simulator"

class Mythomorph:
    def __init__(self, name, level, damage, maxHP,speed,type):
        self.name=name
        self.level=level
        self.damage=damage
        self.maxHP=maxHP
        self.currentHP= maxHP
        self.speed=speed
        self.type=type

    # Function that handles damage
    def takeDamage(self,enemyDamage,multiplier):
        self.currentHP=round(self.currentHP-enemyDamage*multiplier)
        if self.currentHP<0:
            self.currentHP=0

    # Function that handles choosing to move or not
    def move(self):
        n=False
        query=input("Would you like to move {self.name}? yes or no?\n".format(self=self))
        if query == "yes":
            n=True
        return n

    # Function that handles choosing positions if only one morph is on field
    def position(self,p):
        n=p
        query = input("What position would you like to move {self.name} to? center, right, or left?\n".format(self=self))
        while n==p:
            if query=="center":
                n=1
            elif query=="right":
                n=2
            else:
                n=0
            if n==p:
                query=input("{self.name} is already at that position. Please pick another one. center, right, or left.\n ".format(self=self))
        return n

    # Function that handles deciding attacks
    def target(self,Team,aMorph,t):
        n=[]
        if t=="melee" or t=="ranged":
            n= [Team.index(aMorph.name)]
        elif t=="cone":
            if Team.index(aMorph.name)==0:
                n=[0,1]
            elif Team.index(aMorph.name)==2:
                n=[1,2]
            else:
                n=[0,1,2]
        else:
            n=[0,1,2]
        return n

    def __lt__(self,other):
        return (self.speed < other.speed)

    def __gt__(self,other):
        return (self.speed > other.speed)


class Arena:
    def __init__(self,m1,m2,m3,m4,allyz=[0,0,0],enemiez=[0,0,0],morphs=[]):
        self.m1= m1
        self.m2= m2
        self.m3=m3
        self.m4=m4
        self.allyz=allyz
        self.enemiez=enemiez
        self.morphs=morphs
        self.boosts = {'Fire': ['Plant', 'Frost'], 'Water': ['Fire', 'Earth', 'Toxic'],
                       'Plant': ['Water', 'Earth', 'Toxic'], 'Earth': ['Fire', 'Toxic'], 'Energy': ['Water', 'Curse'],
                       'Tempest': ['Fire', 'Plant', 'Frost'], 'Magic': ['Energy', 'Toxic', 'Super'],
                       'Toxic': ['Plant', 'Beast', 'Super'], 'Beast': ['Plant'], 'Frost': ['Water', 'Plant', 'Earth'],
                       'Curse': ['Magic', 'Curse', 'Super'], 'Super': ['Earth', 'Energy', 'Beast', 'Super']}
        self.resistances = {'Fire': ['Ancient', 'Fire', 'Water', 'Earth', 'Energy'],
                            'Water': ['Ancient', 'Plant', 'Tempest', 'Frost'], 'Plant': ['Ancient', 'Fire', 'Frost'],
                            'Earth': ['Ancient', 'Water', 'Plant', 'Earth'],
                            'Energy': ['Ancient', 'Fire', 'Plant', 'Magic', 'Super'], 'Tempest': ['Ancient', 'Tempest'],
                            'Magic': ['Ancient', 'Curse'], 'Toxic': ['Ancient', 'Water', 'Earth', 'Curse'],
                            'Beast': ['Ancient', 'Magic', 'Super'], 'Frost': ['Ancient', 'Fire', 'Frost'],
                            'Curse': ['Ancient', 'Energy', 'Toxic'], 'Super': ['Ancient', 'Magic', 'Toxic', 'Curse']}
        self.immunities = {'Earth': 'Tempest', 'Energy': 'Energy', 'Tempest': 'Earth'}

    # Function that summons morphs onto field
    def summonAlly(self,mm,p):
        n=0
        while mm.name not in self.allyz:
            if p=="center":
                n=1
            elif p=="right":
                n=2
            else:
                n=0
            if self.allyz[n]==0:
                self.allyz[n]=mm.name
                self.morphs.append(mm)
            else:
                p=input("There is already a morph in that area. Pick another spot.\n")

    def summonEnemy(self,mm,p):
        n=0
        while mm.name not in self.enemiez:
            if p=="center":
                n=1
            elif p=="right":
                n=2
            else:
                n=0
            if self.enemiez[n]==0:
                self.enemiez[n]=mm.name
                self.morphs.append(mm)
            else:
                p=input("There is already a morph in that area. Pick another spot. \n")

    # Function that actually moves enemy morphs
    def moveMorph(self,mm,i):
        if arena.allyz.count(0)==1:
            target=self.allyz.index(0)
            remnant=self.allyz.index(mm)
            self.allyz[target]=mm
            self.allyz[remnant]=0
        else:
            target = i
            remnant = self.allyz.index(mm)
            self.allyz[target] = mm
            self.allyz[remnant] = 0


    def moveEnemyMorph(self,mm,i):
        if arena.enemiez.count(0)==1:
            target=self.enemiez.index(0)
            remnant=self.enemiez.index(mm)
            self.enemiez[target]=mm
            self.enemiez[remnant]=0
        else:
            target = i
            remnant = self.enemiez.index(mm)
            self.enemiez[target] = mm
            self.enemiez[remnant] = 0

    # BattleMultiplier for attacks depending on position
    def battleMultiplier(self,attack,position):
        m=1
        if attack=="melee":
            if position==0 or position==2:
                m=[0.5]
            else:
                m=[2.0]
        elif attack=="ranged":
            if position==0 or position==2:
                m=[1.25]
            else:
                m=[0.75]
        elif attack=="cone":
            if position==0:
                m=[0.5, 0.75]
            elif position==2:
                m=[0.75,0.5]
            else:
                m=[0.75,1,0.75]
        else:
            m=[1,1,1]
        return m

    # Function under which battle takes place. List here is hitormiss list
    def battle(self,mm1,mm2,list,multiplier):
        newmultiplier=0
        if mm2.type in self.boosts[mm1.type]:
            newmultiplier=multiplier*2
        elif mm2.type in self.resistances[mm1.type]:
            newmultiplier=multiplier*0.5
        elif mm2.type in self.immunities[mm1.type]:
            newmultiplier=0
        else:
            newmultiplier=multiplier
        if mm2 is not 0:
            print("{mm1.name} attacked {mm2.name}".format(mm1=mm1,mm2=mm2))
            mm2.takeDamage(mm1.damage,newmultiplier)
            print("{mm2.name} has {mm2.currentHP} left".format(mm2=mm2))
            list.append(1)
        else:
            list.append(0)

def BattleSimulation(arena,bs=0):

    #This section is where your morphs are initially summoned onto the "field"
    if bs==0:
        p=input("Where would you like to summon morph 1: center, right, or left\n")
        arena.summonAlly(m1,p)
        p=input("Where would you like to summon morph 2: center, right, or left\n")
        arena.summonAlly(m2,p)
        p = input("Where would you like to summon morph 3: center, right, or left\n")
        arena.summonEnemy(m3,p)
        p = input("Where would you like to summon morph 4: center, right, or left\n")
        arena.summonEnemy(m4,p)
        print(arena.allyz)
        print(arena.enemiez)
        bs=1
        print("Lets Battle!")


    while bs==1:
        # This first section right here makes the list that'll be used to keep track of
        # attacks,multipliers,whether or not morphs will move, and if there is only one morph on a
        # side of the field, where they will move
        order=sorted(arena.morphs)
        order=order[::-1]
        targets=[]
        moves=[]
        positionList=[]
        multipliers=[]
        # This section is basically where you determine what is going to move and where.
        # The moves list determines if they move or not and the position list is
        # for when there is one morph on the field and you have choice in your movement
        for i in order:
            if i.name in arena.allyz:
                print("{i.name} :\n".format(i=i))
                if arena.allyz.count(0)==1:
                    moves.append(i.move())
                    positionList.append(0)
                else:
                    moves.append(i.move())
                    if moves[-1]==True:
                        positionList.append(i.position(arena.allyz.index(i.name)))
                    else:
                        positionList.append(0)

            if i.name in arena.enemiez:
                if arena.enemiez.count(0)==1:
                    moves.append(i.move())
                    positionList.append(0)
                else:
                    moves.append(i.enemyMove())
                    if moves[-1]==True:
                        positionList.append(i.Position(arena.enemiez.index(i.name)))
                    else:
                        positionList.append(0)

        # This section is what attack you are gonna do. The reason it's so complicated
        # is because this is where you determine multipliers and the choice of whether
        # the morph moves or not determines what variable you gotta access.
        for i in order:
            if i.name in arena.allyz:
                print(arena.allyz)
                t = input("What type of attack would you like to perform: melee, ranged, cone, or all\n")
                targets.append(i.target(arena.allyz, i,t))
                if positionList[order.index(i)]== 0:
                    if moves[order.index(i)]== True:
                        multipliers.append(arena.battleMultiplier(t, arena.allyz.index(0)))
                    else:
                        multipliers.append(arena.battleMultiplier(t,arena.allyz.index(i.name)))
                else:
                    multipliers.append(arena.battleMultiplier(t,positionList[order.index(i)]))
            elif i.name in arena.enemiez:
                print(arena.enemiez)
                t = input("What type of attack would you like to perform: melee, ranged, cone, or all\n")
                targets.append(i.target(arena.enemiez,i,t))
                if positionList[order.index(i)]== 0:
                    if moves[order.index(i)]== True:
                        multipliers.append(arena.battleMultiplier(t, arena.enemiez.index(0)))
                    else:
                        multipliers.append(arena.battleMultiplier(t,arena.enemiez.index(i.name)))
                else:
                    multipliers.append(arena.battleMultiplier(t,positionList[order.index(i)]))

        # This section is just where the actual movement happens
        for i in range(len(order)):
            if order[i].name in arena.allyz:
                morph = order[i].name

                if moves[i] == True:
                    arena.moveMorph(morph, positionList[i])
                    p = arena.allyz.index(morph)
                    if p == 0:
                        print("{morph} moved to the left".format(morph=morph))
                    elif p == 1:
                        print("{morph} moved to the center".format(morph=morph))
                    else:
                        print("{morph} moved to the right".format(morph=morph))
                        print(arena.allyz)

            else:
                morph = order[i].name

                if moves[i] == True:
                    arena.moveEnemyMorph(morph, positionList[i])
                    p = arena.enemiez.index(morph)
                    if p == 0:
                        print("{morph} moved to left".format(morph=morph))
                    elif p == 1:
                        print("{morph} moved to center".format(morph=morph))
                    else:
                        print("{morph} moved to right".format(morph=morph))
                        print(arena.enemiez)

        # This section is just where the attack happens. The hitormiss list was
        # made so that aoe attacks dont "miss" if an aoe attack hits an empty spot
        # but also hits a morph. It will only say "attack missed" if no morph was hit.
        for i in range(len(order)):
            if order[i].currentHP != 0:
                if order[i].name in arena.allyz:
                    hitormiss=[]
                    for k in range(len(targets[i])):
                        enemyName=arena.enemiez[targets[i][k]]
                        enemy=0
                        if enemyName != 0:
                            l=0
                            for j in order:
                                if j.name==enemyName:
                                    break
                                else:
                                    l= l+1
                            enemy=order[l]

                        arena.battle(order[i],enemy,hitormiss,multipliers[i][k])
                    if hitormiss.count(0)==len(targets[i]):
                        mm=order[i].name
                        print("{mm} attacks but it misses".format(mm=mm))

                else:
                    hitormiss=[]
                    for k in range(len(targets[i])):
                        enemyName=arena.allyz[targets[i][k]]
                        enemy=0

                        if enemyName != 0:
                            l=0
                            for j in order:
                                if j.name==enemyName:
                                    break
                                else:
                                    l= l+1
                            enemy=order[l]

                        arena.battle(order[i], enemy,hitormiss,multipliers[i][k])
                    if hitormiss.count(0)==len(targets[i]):
                        mm=order[i].name
                        print("{mm} attacks but it misses".format(mm=mm))
            else:
                name=order[i].name
                print("{name} is down!".format(name=name))

        # Win/Lose decision
        for i in order:
            if i.currentHP == 0:
                if i.name in arena.allyz:
                    arena.allyz[arena.allyz.index(i.name)]=0
                else:
                    arena.enemiez[arena.enemiez.index(i.name)] = 0
                arena.morphs.remove(i)

        if arena.allyz == [0,0,0]:
            print("You Lose!")
            bs=2
        elif arena.enemiez == [0,0,0]:
            print("You Win!")
            bs=2




m1=Mythomorph("Brutapotamus",50,10,50,25,'Super')
m2=Mythomorph("Arboar",50,4,40,30,'Plant')
m3=Mythomorph("Statalott",50,7,40,40,'Magic')
m4=Mythomorph("Gauchopod",50,10,25,20,'Toxic')
arena=Arena(m1,m2,m3,m4)

BattleSimulation(arena)



